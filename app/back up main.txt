// package main

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"

// 	"go-clean-arch/modules/database/client"
// 	middleware "go-clean-arch/pkg/middlewares"
// 	"net/http"
// 	"time"

// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/mongo/options"
// )

// func main() {
// 	fmt.Println("Starting Server")
// 	client, err := client.InitialServer()
// 	defer func() {
// 		if err = client.Disconnect(context.Background()); err != nil {
// 			panic(err)
// 		}
// 	}()
// 	mux := http.NewServeMux()
// 	//mux.HandleFunc("/favicon.ico", http.NotFound)
// 	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
// 		fmt.Fprint(w, "Hello world main")
// 	})
// 	mux.HandleFunc("/movie/languages/", func(w http.ResponseWriter, r *http.Request) {
// 		lang := r.URL.Path[len("/movie/languages/"):]
// 		filter := bson.D{{Key: "languages", Value: bson.D{{Key: "$in", Value: bson.A{lang}}}}}

// 		db := client.Database("sample_mflix")
// 		collection := db.Collection("movies")
// 		option := options.Find()
// 		option.SetLimit(10)
// 		option.SetProjection(bson.D{
// 			{Key: "title", Value: 1},
// 			{Key: "year", Value: 1},
// 			{Key: "runtime", Value: 1},
// 			{Key: "imdb", Value: 1},
// 			{Key: "released", Value: 1},
// 			{Key: "languages", Value: 1},
// 			{Key: "tomatoes", Value: -1},
// 		})
// 		cursor, err := collection.Find(context.Background(), filter, option)
// 		if err != nil {

// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		}
// 		defer cursor.Close(context.Background())
// 		var movies []bson.M
// 		if err = cursor.All(context.Background(), &movies); err != nil {

// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		}
// 		decodeData, err := json.Marshal(movies)
// 		if len(movies) <= 0 {
// 			http.Error(w, "no item found", http.StatusNoContent)
// 			return
// 		}
// 		if err != nil {
// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		} else {

// 			w.Header().Set("Content-Type", "application/json")
// 			w.Write(decodeData)
// 		}

// 	})

// 	server := &http.Server{
// 		Addr:         ":8081",
// 		Handler:      middleware.Middleware(mux),
// 		ReadTimeout:  30 * time.Second,
// 		WriteTimeout: 30 * time.Second,
// 	}
// 	fmt.Printf("Server is listening on port :: 8081 !! \n")

// 	errServer := server.ListenAndServe()
// 	if errServer != nil {
// 		fmt.Println(errServer)
// 	}
// }
